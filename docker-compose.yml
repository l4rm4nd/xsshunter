services:

  xsshunterexpress-db:
    image: postgres:16-alpine
    container_name: xsshunter-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_HOST_AUTH_METHOD: trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 3s
      timeout: 5s
      retries: 5
    volumes:
      - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/xsshunter/pg_data:/var/lib/postgresql/data/pgdata
    #networks:
    #  - dev

  xsshunterexpress-service:
    image: l4rm4nd/xsshunter:latest
    container_name: xsshunter-service
    restart: unless-stopped
    env_file:
      - .env
    expose:
      - 8080
    ports:
      - 8080:8080
    volumes:
      - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/xsshunter/payload-fire-images:/app/payload-fire-images
      #- ~/.config/gcloud/application_default_credentials.json:/gcloud.json
    depends_on:
      xsshunterexpress-db:
        condition: service_healthy
    #networks:
    #  - dev
    #labels:
    #  - traefik.enable=true
    #  - traefik.docker.network=dev
    #  - traefik.http.routers.xsshunter.rule=Host(`xss.example.com`, `xss-admin.example.com`)
    #  - traefik.http.routers.xsshunter.service=xsshunter
    #  - traefik.http.services.xsshunter.loadbalancer.server.port=8080
    #  # prevent unauthorized access to the admin panel at /app
    #  - traefik.http.routers.xsshunter-admin.rule=Host(`xss.example.com`, `xss-admin.example.com`) && Path(`/app/`)
    #  - traefik.http.routers.xsshunter-admin.service=xsshunter
    #  - traefik.http.services.xsshunter-admin.loadbalancer.server.port=8080
    #  - traefik.http.routers.xsshunter-admin.middlewares=local-ipwhitelist@file

  xsshunterexpress-trufflehog:
    image: l4rm4nd/xsshunter:trufflehog
    container_name: xsshunter-trufflehog
    restart: unless-stopped
    expose:
      - 8000
    #networks:
    #  - dev

#networks:
#  dev:
#    external: true
